{"version":3,"sources":["../src/grained.js"],"names":["window","doc","grained","ele","opt","Error","element","eStyle","style","hashGrain","Date","now","selectorElement","position","overflow","prefixes","options","animate","patternWidth","patternHeight","grainOpacity","grainDensity","grainWidth","grainHeight","grainChaos","grainSpeed","Object","keys","forEach","key","generateNoise","canvas","createElement","ctx","getContext","width","height","w","h","rgb","Math","random","fillStyle","join","fillRect","toDataURL","addCSSRule","sheet","selector","rules","index","ins","length","insertRule","addRule","noise","animation","keyFrames","pre","keyVal","split","animationAdded","getElementById","parentElement","removeChild","type","id","innerHTML","body","appendChild","styleAdded","rule","document"],"mappings":"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","file":"grained.js","sourcesContent":["/*! Grained.js\n* Author : Sarath Saleem  - https://github.com/sarathsaleem\n* MIT license: http://opensource.org/licenses/MIT\n* GitHub : https://github.com/sarathsaleem/grained\n* v0.0.1\n*/\n((window, doc) => {\n\n    \"use strict\";\n\n    function grained (ele, opt) {\n\n        if (typeof ele !== 'Object')\n            throw new Error('First parameter must be an element object');\n\n        let element = ele,\n            eStyle = element.style,\n            hashGrain = `${ Date.now() }-grain`,\n            selectorElement = null;\n\n        // Set style for parent\n        if (eStyle.position !== 'absolute')\n            eStyle.position = 'relative';\n\n        eStyle.overflow = 'hidden';\n\n        let prefixes = [\"\", \"-moz-\", \"-o-animation-\", \"-webkit-\", \"-ms-\"];\n\n        //default option values\n        let options = {\n            animate: true,\n            patternWidth: 100,\n            patternHeight: 100,\n            grainOpacity: 0.1,\n            grainDensity: 1,\n            grainWidth: 1,\n            grainHeight: 1,\n            grainChaos: 0.5,\n            grainSpeed: 20\n\n        };\n\n        Object.keys(opt).forEach(function (key) {\n            options[key] = opt[key];\n        });\n\n\n        let generateNoise = () => {\n            let canvas = doc.createElement('canvas');\n            let ctx = canvas.getContext('2d');\n            canvas.width = options.patternWidth;\n            canvas.height = options.patternHeight;\n            for (let w = 0; w < options.patternWidth; w += options.grainDensity) {\n                for (let h = 0; h < options.patternHeight; h += options.grainDensity) {\n                    let rgb = Math.random() * 256 | 0;\n                    ctx.fillStyle = `rgba(${[rgb, rgb, rgb, options.grainOpacity].join()})`;\n                    ctx.fillRect(w, h, options.grainWidth, options.grainHeight);\n                }\n            }\n            return canvas.toDataURL('image/png');\n        };\n\n        function addCSSRule(sheet, selector, rules, index) {\n            let ins = (selector.length)? `${selector}{${rules}}` : rules;\n\n            if (\"insertRule\" in sheet) {\n                sheet.insertRule(ins, index);\n            } else if (\"addRule\" in sheet) {\n                sheet.addRule(selector, rules, index);\n            }\n        }\n\n\n        let noise = generateNoise();\n\n        let animation = '',\n            keyFrames = ['0%:-10%,10%', '10%:-25%,0%', '20%:-30%,10%', '30%:-30%,30%', '40%::-20%,20%', '50%:-15%,10%', '60%:-20%,20%', '70%:-5%,20%', '80%:-25%,5%', '90%:-30%,25%', '100%:-10%,10%'];\n\n        let pre = prefixes.length;\n        while (pre--) {\n            animation += `@${prefixes[pre]}keyframes grained{`;\n            for (let key = 0; key < keyFrames.length; key++) {\n                let keyVal = keyFrames[key].split(':');\n                animation += `${keyVal[0]}{`;\n                animation += `${prefixes[pre]}transform:translate(${keyVal[1]});`;\n                animation += `}`;\n            }\n            animation += '}';\n        }\n\n        //add animation keyframe\n        let animationAdded = doc.getElementById('grained-animation');\n        if (animationAdded) {\n            animationAdded.parentElement.removeChild(animationAdded);\n        }\n        let style = doc.createElement(\"style\");\n        style.type = \"text/css\";\n        style.id = 'grained-animation';\n        style.innerHTML = animation;\n        doc.body.appendChild(style);\n\n        //add custimozed style\n        let styleAdded = doc.getElementById(`grained-animation-${hashGrain}`);\n        if (styleAdded) {\n            styleAdded.parentElement.removeChild(styleAdded);\n        }\n\n        style = doc.createElement(\"style\");\n        style.type = \"text/css\";\n        style.id = `grained-animation-${hashGrain}`;\n        doc.body.appendChild(style);\n\n        let rule = `background-image: url(${noise});`;\n        rule += 'position: absolute;content: \"\";height: 300%;width: 300%;left: -100%;top: -100%;';\n        pre = prefixes.length;\n        if (options.animate) {\n            while (pre--) {\n                rule += `${prefixes[pre]}animation-name:grained;`;\n                rule += `${prefixes[pre]}animation-iteration-count: infinite;`;\n                rule += `${prefixes[pre]}animation-duration: ${options.grainChaos}s;`;\n                rule += `${prefixes[pre]}animation-timing-function: steps(${options.grainSpeed}, end);`;\n            }\n        }\n\n        //selecter element to add grains\n        selectorElement = `#${hashGrain}::before`;\n\n\n        addCSSRule(style.sheet, selectorElement, rule);\n\n\n    }\n\n    window.grained = grained;\n\n})(window, document);\n"]}